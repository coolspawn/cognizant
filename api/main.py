# generated by fastapi-codegen:
#   filename:  weather.yaml
#   timestamp: 2022-05-18T18:25:42+00:00

from __future__ import annotations

from datetime import date, datetime
from typing import Optional

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from api.clickhouse.connector import ch_client
from api.weather_data.models import (
    ApiV1HistoricalDataCapitalGetResponse, WeatherData,
)
from api.weather_data.serializers import AsyncWeatherDataSerializer

ach_connector = AsyncWeatherDataSerializer()

app = FastAPI(
    title='Weather API',
    version='v1',
    servers=[{'url': 'http://127.0.0.1:8000'}],
)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
    allow_credentials=True,
)


@app.on_event('startup')
async def startup():
    await ach_connector.connect()

#TODO move to route
@app.get('/init_db')
async def initialize_db():
    # client does not suport multiple statement
    ch_client.execute('CREATE DATABASE IF NOT EXISTS db_weather;')
    with open('./clickhouse/db_struct.ddl', 'r') as f:
        ddl = f.read()
        ch_client.execute(ddl)
    return 'done!'



@app.get('/api/v1/historical_data/{capital}')
async def get_api_v1_historical_data_capital(
        capital: str,
        from_date: Optional[date] = None,
        till_date: Optional[date] = None,
        aggregation: Optional[str] = None,
        target: Optional[str] = None,
        cursor: Optional[float] = None,
        limit: Optional[int] = 100,

):
    params = {
        'capital': capital,
        'from_date': from_date,
        'till_date': till_date,
        'cursor': datetime.fromtimestamp(cursor) if cursor else None,
        'limit': limit,
        'aggregation': aggregation,
        'target': target,
    }
    query_set = await ach_connector.get_queryset(**params)
    results = [WeatherData(**row) for row in query_set]
    cursor = query_set[-1]['measure_date'].timestamp()
    params.update({'cursor': cursor})
    resp = ApiV1HistoricalDataCapitalGetResponse(results=results, **params)

    return resp
